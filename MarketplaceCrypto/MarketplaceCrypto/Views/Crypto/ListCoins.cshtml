@model IEnumerable<Entities.Models.BinanceData>

<div>
    <h6>HERE WILL BE LISTED ALL THE COINS</h6>
    <form asp-action="Pattern" method="get">
        <input type="text" name="pattern" placeholder="Search coin" />
        <button type="submit">Search</button>
    </form>
</div>




<table class="table table-sm table-dark">
    <thead>
    <tr>
        <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "symbol",descending = ViewBag.SortDescending })">Symbol</a></th>
            <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "lastPrice" })">Last Price</a></th>
            <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "openPrice" })">Open Price</a></th>
            <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "highPrice" })">High Price</a></th>
            <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "change24h" })">Change for 24h</a></th>
            <th><a href="@Url.Action("Sort", "Crypto", new { sortBy = "volume" })">Volume</a></th>
            <th>MarketCap</th>

    </tr>
    </thead>
    <tbody id="cryptoData">
    @foreach (var coin in Model)
    {
        <tr>
            <td><a href="@Url.Action("DetailsBySymbol", "Crypto", new { symbol = coin.Symbol })">@coin.Symbol</a></td>
            <td>@coin.LastPrice</td>
            <td>@coin.OpenPrice</td>
            <td>@coin.HighPrice</td>
            <td>
                @{
                    var percentage = (coin.LastPrice - coin.OpenPrice) / coin.OpenPrice * 100;
                    @percentage.ToString("0.00")
                    ;
                }
                %
            </td>
            <td>@coin.Volume</td>
            <td>@coin.QuoteVolume</td>
        </tr>
    }
    </tbody>
</table>


<script src="~/js/signalr.js"></script>

<script>
    var connection = new signalR.HubConnectionBuilder().withUrl("/hub/cryptos").build();

    connection.on("updateMarket", (cryptoData) => {
        updateTable(cryptoData);
    });

    connection.start().then(() => {
        console.log("Connected....");
        OnWindowLoad();
    }).catch((error) => {
        console.log("Error connecting: " + error);
    });

    function updateTable(cryptoData) {
        var tableBody = document.getElementById("cryptoData");
        tableBody.innerHTML = ""; 

        cryptoData.forEach((coin) => {
            var newRow = tableBody.insertRow();

            var symbolCell = newRow.insertCell();
            var symbolLink = document.createElement("a"); 
            symbolLink.href = "/Crypto/DetailsBySymbol?symbol=" + coin.symbol; 
            symbolLink.innerText = coin.symbol; 
            symbolCell.appendChild(symbolLink); 

            var lastPriceCell = newRow.insertCell();
            lastPriceCell.innerText = coin.lastPrice.toFixed(2);

            var openPriceCell = newRow.insertCell();
            openPriceCell.innerText = coin.openPrice.toFixed(2);

            var highPriceCell = newRow.insertCell();
            highPriceCell.innerText = coin.highPrice.toFixed(2);

            var changeCell = newRow.insertCell();
            var percentage = (coin.lastPrice - coin.openPrice) / coin.openPrice * 100;
            changeCell.innerText = percentage.toFixed(2) + "%";

            var volumeCell = newRow.insertCell();
            volumeCell.innerText = coin.volume.toFixed(2);

            var marketCapCell = newRow.insertCell();
            marketCapCell.innerText = coin.quoteVolume.toFixed(2);
        });
    }

    function OnWindowLoad() {

        connection.invoke("UpdateCryptocurrencies",null);
 
        console.log("sened the call...");
    }
</script>


  
